#!/usr/bin/env python
# run phylip dnapars / protpars with standard command-line interface

import optparse
import os
import subprocess
import sys
import time

from rasmus import treelib
from rasmus import util
from compbio import phylip, fasta
from compbio import phylorun as phy

o = optparse.OptionParser()
phy.add_common_options(o)
o.add_option("-x", "--random", dest="random", action="store_true")
#conf, files = phy.parse_common_options(o)
conf, files = o.parse_args()

#=============================================================================

def run(args, outdir):
    """Run a program in a subprocess within a new directory"""
    curdir = os.getcwd()
    os.chdir(outdir)
    ret = subprocess.call(args)
    os.chdir(curdir)
    return ret


def setup_usertree(treefile, treefile2):
    usertree = treelib.read_tree(treefile)

    # save data
    data = dict((n.name, n.data) for n in usertree)

    # prepare usertree
    usertree2 = treelib.unroot(usertree, newCopy=True)
    for n in usertree2:
        n.data = {}

    usertree2.write(outdir + "/" + treefile2)

    return usertree, data


#=============================================================================

result = 0
for fn in files:
    basename = phy.get_basename(fn, conf)

    outdir = basename + conf.outputext
    phy.make_output_dir(outdir)
    align = fasta.read_fasta(basename + conf.alignext)

    # require minimium size of alignment
    if len(align) <= 2:
        continue

    # set user tree
    if conf.usertreeext:
        usertree_file = "usertree"
        usertree, data = setup_usertree(basename + conf.usertreeext,
                                        usertree_file)
    else:
        usertree = None
        usertree_file = None
        data = None

    # fix bootstraps
    if conf.boot == 0:
        conf.boot = 1

    # random seed
    if conf.random:
        seed = str(int(time.time()))
    else:
        seed = 1

    # extra arguments
    args = "y"
    if conf.extra:
        # shell automatically escapes special characters, ``unescape'' them
        s = conf.extra.decode('string_escape')
        args = s + args

    # program
    if conf.seqtype == "dna":
        prog = phylip.dnapars
    else:
        prog = phylip.protpars

    trees = prog(align, verbose=True,
                 args=args,
                 usertree=usertree,
                 bootiter=conf.boot,
                 seed=seed,
                 saveOutput=outdir)

    # perform consensus
    if conf.boot > 1:
        out = util.open_stream(outdir + "/bootstrap", 'w')
        for tree in trees:
	    tree.write(out, oneline=True)
            out.write('\n')
        out.close()

        if subprocess.call(
            ["treecons",
             "-o", outdir + "/result",
             "--binary",
             "-a", basename + conf.alignext,
             outdir + "/bootstrap"]) != 0:
            result = 1
            continue
        tree = treelib.read_tree(outdir + "/result")
    else:
        tree = trees

    # reorder tree
    if usertree:
        treelib.reorder_tree(tree, usertree)

    # restore data
    if data:
        tree.write(basename + conf.treeext)
        tree = treelib.read_tree(basename + conf.treeext)

        # copy over data
        for name, val in data.iteritems():
            for key, value in val.iteritems():
                if key not in tree.nodes[name].data:
                    tree.nodes[name].data[key] = value

    tree.write(basename + conf.treeext)

sys.exit(result)
